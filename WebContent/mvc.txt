MVC 패턴

Model 

View

Controller

모델 1 버전, 모델 2 버전
모델 1버전 ====> 모든 것을 JSP 로만 처리하는거
모델 2버전 ====> JSP 에서 서블릿을 분리

모델1버전은 JSP를 이용한 단순한 모델
웹 브라우저의 요청을 JSP가 직접 처리하고 요청을 받은 JSP는 자바빈(클래스)을 사용해서
웹브라우저가 요청한 작업을 처리하고 그 결과를 클라이언트(사용자) 에게 출력합니다.

JSP 안에 프로그램을 위한 비즈니스 로직처리 코드 + 웹 브라우저에 결과를 출력하는 코드

모델2버전은 웹 브라우저의 요청을 서블릿이 받는다. 서블릿은 웹브라우저의 요청을 
알맞게 처리한 후에 그 결과를 보여줄 JSP 페이지로 포워딩 합니다.
여기서 JSP는 결과를 출력하는 코드만 가지고 있게 되고, 나머지는 서블릿이 처리

MVC 패턴 (모델-뷰-컨트롤러)
모델 (Model) : 비즈니스 영역의 로직을 처리 ( 여러분들이 어떤 데이터를 어떻게 처리하는지 )
뷰 (View) : 사용자가 보게될 결과 화면을 담당
컨트롤러 (Controller) : 사용자의 입력 처리와 흐름 제어를 담당

비즈니스 로직
컴퓨터프로그램에서 실세계의 규칙에 따라 데이터를 생성/표시/저장/변경 하는 부분을 말한다.
업무에 필요한 데이터처리를 수행하는 프로그램의 일부

MVC 패턴의 흐름
1. 사용자가 요청을 보낸다. ( 컨트롤러가 요청을 받음 )
2. 모델을 이용해서 비즈니스 로직을 처리 
3. 컨트롤러가 비즈니스 로직 처리 결과를 어떤 뷰를 통해 출력할건지 선택
4. 응답을 사용자에게 보낸다.

모델은 비즈니스와 관련된 로직을 처리하면 될뿐 사용자에게 보일 화면이나 흐름 제어는 하지 않음
뷰는 사용자에게 알맞은 화면을 보여주기만 하면 될뿐 비즈니스 로직이나 흐름제어 도 하지 않음
컨트롤러는 사용자의 요청에 대해서 알맞은 모델을 사용하고 사용자에게 보여줄 뷰를 선택하면 된다.

이렇게 모델, 뷰, 컨트롤러가 분리되어 있기 때문에 만약 모델의 내부 로직이 변경되더라도 
뷰는 영향을 받지 않게된다. ==> 우리가 모델의 코드를 변경하더라도 뷰를 수정할 일이 적어진다.

MVC 패턴을 이용하면 유지보수 작업이 쉬워지고 어플리케이션을 쉽게 확장할수 있게 된다.
(ex 모바일 사용자가 추가된다?? ==> 뷰만 추가하면 된다. 
    흐름제어가 변경된다?? ==> 컨트롤러만 수정하면 된다.
)

컨트롤러 = 서블릿
모델 = 로직처리클래스, 모델패키지(데이터베이스에 저장할 정보를 표현한 클래스)
뷰 = JSP
